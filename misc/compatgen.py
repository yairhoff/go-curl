#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import re

CURL_GIT_PATH = os.environ.get("CURL_GIT_PATH", './curl')
MIN_VERSION = "7.68"

target_dirs = [
    '{}/include/curl'.format(CURL_GIT_PATH),
    '/usr/local/include',
    'libdir/gcc/target/version/include'
    '/usr/target/include',
    '/usr/include',
]


def get_curl_path():
    for d in target_dirs:
        for root, dirs, files in os.walk(d):
            if 'curl.h' in files:
                return os.path.join(root, 'curl.h')
    raise Exception("Not found")


def version_symbol(ver):  # noqa: C901
    os.system(
        # 'cd "{}" && git status --porcelain && git checkout -f "{}"'
        'cd "{}" && git checkout -f "{}"'
        .format(CURL_GIT_PATH, ver)
    )
    deprecated_opts = []
    opts = []
    codes = []
    infos = []
    vers = []
    auths = []

    init_pattern = re.compile(
        r'CURLINIT\(([^,]+),'
    )
    opt_pattern = re.compile(
        r'CURLOPT\((CURLOPT_[^,]+),'
    )
    deprecated_pattern = re.compile(
        r'CURLOPTDEPRECATED\((CURLOPT_[^,]+),'
    )
    auth_pattern = re.compile(r'#define (CURLAUTH_\S+)')
    error_pattern = re.compile(r'^\s+(CURLE_[A-Z_0-9]+),')
    info_pattern = re.compile(r'^\s+(CURLINFO_[A-Z_0-9]+)\s+=')

    with open(os.path.join(CURL_GIT_PATH, 'include', 'curl', 'curl.h')) as f:
        for line in f:  # noqa: C901
            match = init_pattern.findall(line)
            if match:
                opts.append('CURLOPT_' + match[0])
            match = opt_pattern.findall(line)
            if match:
                opts.append(match[0])
            if line.startswith('#define CURLOPT_'):
                o = line.split()
                opts.append(o[1])
            match = deprecated_pattern.findall(line)
            if match:
                deprecated_opts.append(match[0])
            match = auth_pattern.findall(line)
            if match:
                auths.append(match[0])
            match = error_pattern.findall(line)
            if match:
                codes.append(match[0])
            if line.startswith('#define CURLE_'):
                c = line.split()
                codes.append(c[1])
            match = info_pattern.findall(line)
            if match:
                infos.append(match[0])
            if line.startswith('#define CURLINFO_'):
                i = line.split()
                if '0x' not in i[2]:  # :(
                    infos.append(i[1])
            if line.startswith('#define CURL_VERSION_'):
                i = line.split()
                vers.append(i[1])

    # os.system(
    #     ('cd "{}" && git checkout -f "{}"')
    #     .format(CURL_GIT_PATH, 'master')
    # )
    return opts, codes, infos, vers, auths, deprecated_opts


def extract_version(tag_str):
    result = re.search(r"curl-([0-9]+)_([0-9]+)_([0-9]+)", tag_str)
    version = {
      "major": int(result.group(1)),
      "minor": int(result.group(2)),
      "patch": int(result.group(3)),
      "version": tag_str
    }
    return version



def is_valid_version(version):
    min_major, min_minor = map(int, MIN_VERSION.split("."))
    major,minor = version["major"],version["minor"]
    return major > min_major or (major == min_major and minor >= min_minor)

tags = os.popen(
    "cd {} && git tag | grep -E '^curl-[0-9]+_[0-9]+_[0-9]+$'"
    .format(CURL_GIT_PATH)
).read().split('\n')[:-1]
tags = map(extract_version, tags)
tags = filter(is_valid_version, tags)
versions = sorted(tags, key=lambda v: [v["major"], v["minor"], v["patch"]], reverse=True)  # noqa: E501
last = version_symbol("master")

template = """
/* generated by compatgen.py */
#include<curl/curl.h>


"""

result = [template]
result_tail = ["/* generated ends */\n"]
if __name__ == '__main__':  # noqa: C901
    for ver in versions:
        major = ver["major"]
        minor = ver["minor"]
        patch = ver["patch"]
        opts, codes, infos, vers, auths, deprecated_opts = curr = version_symbol(ver["version"])  # noqa: E501

        for o in last[0]:
            if o not in opts:
                result.append("#define {} 0".format(o))  # 0 for nil option
        for c in last[1]:
            if c not in codes:
                result.append("#define {} -1".format(c))  # -1 for error
        for i in last[2]:
            if i not in infos:
                result.append("#define {} 0".format(i))  # 0 for nil
        for v in last[3]:
            if v not in vers:
                result.append("#define {} 0".format(v))  # 0 for nil
        for a in last[4]:
            if a not in auths:
                result.append('#define {} 0'.format(a))  # 0 for nil
        for d in last[5]:
            if d not in deprecated_opts:
                result.append("#define {} 0".format(d))  # 0 for nil option

        result.append(
            (
                "#if (LIBCURL_VERSION_MAJOR == {} && " +
                "((LIBCURL_VERSION_MINOR == {} && " +
                "LIBCURL_VERSION_PATCH < {}) " +
                "|| LIBCURL_VERSION_MINOR < {}))"
            ).format(major, minor, patch, minor))

        result_tail.insert(0, "#endif /* {}.{}.{} */".format(
            major, minor, patch
        ))

        last = curr

result.append(f"#error libcurl version is too old. supported versions are {MIN_VERSION} or above")

result.extend(result_tail)

last = version_symbol("master")

with open("./compat.h", 'w') as fp:
    fp.write('\n'.join(result))
